/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package ui;

import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.stream.Collectors;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import model.Encounter;
import model.EncounterDirectory;
import model.House;
import model.Patient;
import model.PatientDirectory;
import model.Person;
import model.PersonDirectory;
import model.VitalSigns;

/**
 *
 * @author arjun
 */
public class ViewJPanel extends javax.swing.JPanel {

    /**
     * Creates new form ViewJPanel
     */
    PersonDirectory personList;
    PatientDirectory patientList;
    EncounterDirectory encounterList;
    int isEncounterPresent = 0;
    Patient patientPresent;
    int selectedRowIndex;
    public ViewJPanel(PersonDirectory personList, PatientDirectory patientList, EncounterDirectory encounterList) {
        initComponents();
        this.personList = personList;
        this.patientList = patientList;
        this.encounterList = encounterList;
        displayPersonData();
        displayPatientData();
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tablePeopleData = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        tablePatientData = new javax.swing.JTable();
        txtLastName = new javax.swing.JTextField();
        txtAge = new javax.swing.JTextField();
        genderComboBox = new javax.swing.JComboBox<>();
        txtAddress = new javax.swing.JTextField();
        txtContact = new javax.swing.JTextField();
        txtEmail = new javax.swing.JTextField();
        cityComboBox = new javax.swing.JComboBox<>();
        communityComboBox = new javax.swing.JComboBox<>();
        jLabel12 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        txtFirstName = new javax.swing.JTextField();
        txtHouseNumber = new javax.swing.JTextField();
        txtPinCode = new javax.swing.JTextField();
        jLabel13 = new javax.swing.JLabel();
        txtPersonId = new javax.swing.JTextField();
        btnSelect = new javax.swing.JButton();
        btnUpdate = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        btnAddEncounter = new javax.swing.JButton();
        jLabel14 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        txtLowBP = new javax.swing.JTextField();
        txtHighBP = new javax.swing.JTextField();
        txtHeartRate = new javax.swing.JTextField();
        txtWeight = new javax.swing.JTextField();

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(0, 120, 0));
        jLabel1.setText("View Records");

        tablePeopleData.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Person Id", "First Name", "Last Name", "City"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tablePeopleData);
        if (tablePeopleData.getColumnModel().getColumnCount() > 0) {
            tablePeopleData.getColumnModel().getColumn(0).setResizable(false);
            tablePeopleData.getColumnModel().getColumn(1).setResizable(false);
            tablePeopleData.getColumnModel().getColumn(2).setResizable(false);
            tablePeopleData.getColumnModel().getColumn(3).setResizable(false);
        }

        tablePatientData.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Patient Id", "First Name", "Low BP", "High BP", "Heart Rate", "Weight", "Healthy"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(tablePatientData);
        if (tablePatientData.getColumnModel().getColumnCount() > 0) {
            tablePatientData.getColumnModel().getColumn(0).setResizable(false);
            tablePatientData.getColumnModel().getColumn(1).setResizable(false);
            tablePatientData.getColumnModel().getColumn(2).setResizable(false);
            tablePatientData.getColumnModel().getColumn(3).setResizable(false);
            tablePatientData.getColumnModel().getColumn(4).setResizable(false);
            tablePatientData.getColumnModel().getColumn(6).setResizable(false);
        }

        genderComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Male", "Female", "Prefer not to answer", "" }));

        cityComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Boston", "Cambridge", "Quincy" }));
        cityComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cityComboBoxActionPerformed(evt);
            }
        });

        communityComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                communityComboBoxActionPerformed(evt);
            }
        });

        jLabel12.setForeground(new java.awt.Color(0, 143, 0));
        jLabel12.setText("House No");

        jLabel2.setForeground(new java.awt.Color(0, 143, 0));
        jLabel2.setText("First Name");

        jLabel3.setForeground(new java.awt.Color(0, 143, 0));
        jLabel3.setText("Last Name");

        jLabel4.setForeground(new java.awt.Color(0, 143, 0));
        jLabel4.setText("Age");

        jLabel5.setForeground(new java.awt.Color(0, 143, 0));
        jLabel5.setText("Gender");

        jLabel6.setForeground(new java.awt.Color(0, 143, 0));
        jLabel6.setText("Address");

        jLabel7.setForeground(new java.awt.Color(0, 143, 0));
        jLabel7.setText("Contact");

        jLabel8.setForeground(new java.awt.Color(0, 143, 0));
        jLabel8.setText("Email");

        jLabel9.setForeground(new java.awt.Color(0, 143, 0));
        jLabel9.setText("Community");

        jLabel10.setForeground(new java.awt.Color(0, 143, 0));
        jLabel10.setText("City");

        jLabel11.setForeground(new java.awt.Color(0, 143, 0));
        jLabel11.setText("Pin Code");

        txtFirstName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtFirstNameActionPerformed(evt);
            }
        });

        txtHouseNumber.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtHouseNumberActionPerformed(evt);
            }
        });

        jLabel13.setForeground(new java.awt.Color(0, 143, 0));
        jLabel13.setText("Person Id");

        btnSelect.setText("Select");
        btnSelect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSelectActionPerformed(evt);
            }
        });

        btnUpdate.setText("Update");
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });

        btnDelete.setText("Delete");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        btnAddEncounter.setText("Add Encounter");
        btnAddEncounter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddEncounterActionPerformed(evt);
            }
        });

        jLabel14.setForeground(new java.awt.Color(0, 143, 0));
        jLabel14.setText("Low BP");

        jLabel15.setForeground(new java.awt.Color(0, 143, 0));
        jLabel15.setText("High BP");

        jLabel16.setForeground(new java.awt.Color(0, 143, 0));
        jLabel16.setText("Heart Rate");

        jLabel17.setForeground(new java.awt.Color(0, 143, 0));
        jLabel17.setText("Weight");

        txtHighBP.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtHighBPActionPerformed(evt);
            }
        });

        txtHeartRate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtHeartRateActionPerformed(evt);
            }
        });

        txtWeight.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtWeightActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 42, Short.MAX_VALUE)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(36, 36, 36))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel8)
                                .addGap(39, 39, 39)
                                .addComponent(txtEmail, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel7)
                                .addGap(25, 25, 25)
                                .addComponent(txtContact, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel5)
                                .addGap(28, 28, 28)
                                .addComponent(genderComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                    .addComponent(jLabel4)
                                    .addGap(44, 44, 44)
                                    .addComponent(txtAge))
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(txtFirstName, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(txtLastName, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                        .addGap(48, 48, 48)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addGroup(layout.createSequentialGroup()
                                            .addComponent(jLabel12)
                                            .addGap(30, 30, 30)
                                            .addComponent(txtHouseNumber, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGroup(layout.createSequentialGroup()
                                            .addComponent(jLabel13)
                                            .addGap(30, 30, 30)
                                            .addComponent(txtPersonId, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel6)
                                            .addComponent(jLabel10)
                                            .addComponent(jLabel11))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(txtAddress, javax.swing.GroupLayout.DEFAULT_SIZE, 120, Short.MAX_VALUE)
                                            .addComponent(cityComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(communityComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(txtPinCode))))
                                .addGap(127, 127, 127)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel14)
                                    .addComponent(jLabel15)
                                    .addComponent(jLabel16)
                                    .addComponent(jLabel17)))
                            .addComponent(jLabel9))
                        .addContainerGap(375, Short.MAX_VALUE))))
            .addGroup(layout.createSequentialGroup()
                .addGap(398, 398, 398)
                .addComponent(jLabel1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(79, 79, 79)
                .addComponent(btnSelect)
                .addGap(45, 45, 45)
                .addComponent(btnUpdate)
                .addGap(50, 50, 50)
                .addComponent(btnDelete)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(btnAddEncounter)
                    .addComponent(txtLowBP)
                    .addComponent(txtHighBP)
                    .addComponent(txtHeartRate)
                    .addComponent(txtWeight, javax.swing.GroupLayout.DEFAULT_SIZE, 120, Short.MAX_VALUE))
                .addGap(184, 184, 184))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(62, 62, 62)
                .addComponent(jLabel1)
                .addGap(38, 38, 38)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(13, 13, 13)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnSelect)
                    .addComponent(btnUpdate)
                    .addComponent(btnDelete)
                    .addComponent(btnAddEncounter))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(txtFirstName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel13)
                    .addComponent(txtPersonId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel14)
                    .addComponent(txtLowBP, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(txtLastName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel12)
                    .addComponent(txtHouseNumber, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel15)
                    .addComponent(txtHighBP, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(txtAge, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6)
                    .addComponent(txtAddress, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel16)
                    .addComponent(txtHeartRate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(25, 25, 25)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(genderComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel10)
                    .addComponent(cityComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel17)
                    .addComponent(txtWeight, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(23, 23, 23)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(txtContact, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel9)
                    .addComponent(communityComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(27, 27, 27)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(txtEmail, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel11)
                    .addComponent(txtPinCode, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(410, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void cityComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cityComboBoxActionPerformed
        // TODO add your handling code here:
        
             DefaultComboBoxModel modelCommunity = new DefaultComboBoxModel();

        if(cityComboBox.getSelectedItem() != null){
            if(cityComboBox.getSelectedItem().toString() == "Boston"){
                modelCommunity.addElement("Allston");
                modelCommunity.addElement("Back Bay");
                modelCommunity.addElement("Bay Village");
                modelCommunity.addElement("Beacon Hill");
                modelCommunity.addElement("Roxbury");
                modelCommunity.addElement("Brookline");

            } else if(cityComboBox.getSelectedItem().toString() == "Cambridge"){
                modelCommunity.addElement("East Cambridge");
                modelCommunity.addElement("Wellington");
                modelCommunity.addElement("Riverside");
                modelCommunity.addElement("Strawberry Hill");

            } else if (cityComboBox.getSelectedItem().toString() == "Quincy"){
                modelCommunity.addElement("Wollaston");
                modelCommunity.addElement("Marina Bay");
                modelCommunity.addElement("Adams Shore");
                modelCommunity.addElement("Quincy Point");
                modelCommunity.addElement("Squantum");

            }

            communityComboBox.setModel(modelCommunity);

            
        }


    }//GEN-LAST:event_cityComboBoxActionPerformed

    private void communityComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_communityComboBoxActionPerformed
        // TODO add your handling code here:

        if(communityComboBox.getSelectedItem() != null){

            switch (communityComboBox.getSelectedItem().toString()){

                case "Squantum" : txtPinCode.setText("02171"); break;
                case "Quincy Point" : txtPinCode.setText("02122"); break;
                case "Adams Shore" : txtPinCode.setText("02169"); break;
                case "Marina Bay" : txtPinCode.setText("02172"); break;
                case "Wollaston" : txtPinCode.setText("02170"); break;
                case "Strawberry Hill" : txtPinCode.setText("02632"); break;
                case "Riverside" : txtPinCode.setText("02458"); break;
                case "Wellington" : txtPinCode.setText("02155"); break;
                case "East Cambridge" : txtPinCode.setText("02141"); break;
                case "Brookline" : txtPinCode.setText("02445"); break;
                case "Roxbury" : txtPinCode.setText("02120"); break;
                case "Beacon Hill" : txtPinCode.setText("02108"); break;
                case "Back Bay" : txtPinCode.setText("02116"); break;
                case "Allston" : txtPinCode.setText("02134"); break;
                default : txtPinCode.setText("02120"); break;

            }

        }
    }//GEN-LAST:event_communityComboBoxActionPerformed

    private void txtFirstNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtFirstNameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtFirstNameActionPerformed

    private void txtHouseNumberActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtHouseNumberActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtHouseNumberActionPerformed

    private void btnSelectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSelectActionPerformed
        // TODO add your handling code here:
        int selectedRowIndex1 = tablePeopleData.getSelectedRow();
        selectedRowIndex = selectedRowIndex1;
        if(selectedRowIndex < 0){
            JOptionPane.showMessageDialog(this, "Please select a row");
        
        
        }else{
            Person person = personList.getPersonList().get(selectedRowIndex);
            txtFirstName.setText(person.getFirstName());
            txtLastName.setText(person.getLastName());
            txtEmail.setText(person.getEmail());
            txtAddress.setText(person.getHomeAddress().getAddress());
            txtAge.setText(String.valueOf(person.getAge()));
            txtPersonId.setText(String.valueOf(person.getPersonId()));
            txtContact.setText(person.getContactNumber());
            txtHouseNumber.setText(String.valueOf(person.getHomeAddress().getHouseNumber()));
            txtPinCode.setText(String.valueOf(String.valueOf(person.getHomeAddress().getPinCode())));
            cityComboBox.setSelectedItem(person.getHomeAddress().getCity());
            communityComboBox.setSelectedItem(person.getHomeAddress().getCommunity());
            System.out.println(person.getHomeAddress().getCommunity());
            System.out.println(communityComboBox.getSelectedItem().toString());
            
            
            
       
            
        }
    }//GEN-LAST:event_btnSelectActionPerformed

    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
        // TODO add your handling code here:
//       int selectedRowIndex = tablePeopleData.getSelectedRow();
//        selectedRowIndex = selectedRowIndex1;
        if(selectedRowIndex < 0){
            JOptionPane.showMessageDialog(this, "Please select a row");
        }else{
            
            if(txtPersonId.getText().isEmpty() || txtPinCode.getText().isEmpty() || txtHouseNumber.getText().isEmpty() || txtFirstName.getText().isEmpty() || txtLastName.getText().isEmpty() || txtEmail.getText().isEmpty() || txtContact.getText().isEmpty() || txtAge.getText().isEmpty() || txtAddress.getText().isEmpty() || cityComboBox.getSelectedItem() == null || communityComboBox.getSelectedItem() == null || genderComboBox.getSelectedItem() == null   ){
        
            JOptionPane.showMessageDialog(this,"Please add all the fields");
        
        } else{
                Person person = personList.getPersonList().get(selectedRowIndex);
//            House house = new House();
            String firstName = txtFirstName.getText();
            String lastName = txtLastName.getText();
            String email = txtEmail.getText();
            int age = Integer.parseInt(txtAge.getText());
            String gender = genderComboBox.getSelectedItem().toString();
            String address = txtAddress.getText();
            String city = cityComboBox.getSelectedItem().toString();
            String community = communityComboBox.getSelectedItem().toString();
            String pinCode = txtPinCode.getText();
            int houseNumber = Integer.parseInt(txtHouseNumber.getText());
            String contact = txtContact.getText();
            
            
            
                    
//            try{
//                int id = Integer.parseInt(txtPersonId.getText());
//                boolean bool;
//                bool = personList.isUniquePersonIdUpdate(id,selectedRowIndex);
//                if(bool == false){
//                    JOptionPane.showMessageDialog(this, "Please enter unique Person Id");
//                    return;
//                } else{
//                    
//                    person.setPersonId(id);
//                
//                }
//            
//            } catch(NumberFormatException n){
//                JOptionPane.showMessageDialog(this, "Please enter numeric value for Person ID");
//                return ;
//            
//            }
            
            person.setFirstName(firstName);
            person.setLastName(lastName);
            person.setAge(age);
            person.setGender(gender);
            person.setEmail(email);
            person.setContactNumber(contact);
            
            
//            house.setAddress(address);
//            house.setCity(city);
//            house.setCommunity(community);
//            house.setHouseNumber(houseNumber);
//            house.setPinCode(pinCode);
            
            person.getHomeAddress().setAddress(address);
            person.getHomeAddress().setCity(city);
            person.getHomeAddress().setCommunity(community);
            person.getHomeAddress().setHouseNumber(houseNumber);
            person.getHomeAddress().setPinCode(pinCode);
//            person.setHomeAddress(house);
            
//            personList.personList.add(person);
            
//            System.out.print(personList.personList);
//            System.out.printf(person.getAge().toString);
//            System.out.printf(person.getContactNumber());
            
            JOptionPane.showMessageDialog(this, "Person Details updateded successfully");
            
            if(patientList.getPatientList().size() >= 1){
                VitalSigns vitalSign = new VitalSigns(0,0,0,0);
                House house = new House();
                Patient patientUpdated = new Patient("","",0,"",house,"","",vitalSign,0);
//                person.getFirstName(),person.getLastName(),person.getAge(),person.getGender(),person.getHomeAddress(),person.getContactNumber(),person.getEmail(),vitalSign,person.getPersonId()
                for(Patient patient : patientList.getPatientList()){
                    if(patient.getPersonId() == person.getPersonId()){
                        patientUpdated = patient;
                        
                    
                    }
                }
                
                patientUpdated.setFirstName(firstName);
                patientUpdated.setLastName(lastName);
                patientUpdated.setPersonId(person.getPersonId());
                patientUpdated.setAge(age);
                patientUpdated.setContactNumber(contact);
                patientUpdated.setEmail(email);
                patientUpdated.setGender(gender);
                patientUpdated.getHomeAddress().setAddress(address);
                patientUpdated.getHomeAddress().setCity(city);
                patientUpdated.getHomeAddress().setCommunity(community);
                patientUpdated.getHomeAddress().setHouseNumber(houseNumber);
                patientUpdated.getHomeAddress().setPinCode(pinCode);
                
            
            }
            
            txtFirstName.setText("");
            txtLastName.setText("");
            txtAge.setText("");
            txtAddress.setText("");
            txtContact.setText("");
            txtEmail.setText("");
            txtHouseNumber.setText("");
            genderComboBox.setSelectedItem(null);
            cityComboBox.setSelectedItem(null);
            communityComboBox.setSelectedItem(null);
            txtPinCode.setText("");
            txtPersonId.setText("");
            
            displayPersonData();
            displayPatientData();
            
            }
            
            
        
        }
    }//GEN-LAST:event_btnUpdateActionPerformed

    private void btnAddEncounterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddEncounterActionPerformed
        // TODO add your handling code here:
//        int rowIndex = tablePeopleData.getSelectedRow();


        if(selectedRowIndex < 0){
            JOptionPane.showMessageDialog(this, "Please select a row");
        }else{

        if(txtLowBP.getText().isEmpty() || txtHighBP.getText().isEmpty() || txtHeartRate.getText().isEmpty() || txtWeight.getText().isEmpty()){
        
            JOptionPane.showMessageDialog(this,"Please add all the fields");
            
        } else {
            
            Person person = personList.getPersonList().get(selectedRowIndex);
        int lowBP = Integer.parseInt(txtLowBP.getText());
        int highBP = Integer.parseInt(txtHighBP.getText());
        int heartRate = Integer.parseInt(txtHeartRate.getText());
        float weight = Float.parseFloat(txtWeight.getText());
        
        VitalSigns vitalSign = new VitalSigns(lowBP, highBP, heartRate, weight);
        
         House house = new House();
         Patient patientNew = new Patient("","",0,"",house,"","",vitalSign,0);
         
        if(patientList.getPatientList().size() >= 1){
            for(Patient patient : patientList.getPatientList()){
            if(patient.getPersonId() == person.getPersonId()){
                System.out.println("check 0");
                isEncounterPresent = 1;
//                patientPresent = patient;
            
            }
//else{
//                isEncounterPresent = 0;
//                System.out.println("check 1");
//            
//            }
            
        }
        
        } else {
            System.out.println("check 2");
            isEncounterPresent = 0;
        }
        
        
        if(isEncounterPresent == 0){
            System.out.println("check 3");
            patientNew = new Patient(person.getFirstName(),person.getLastName(),person.getAge(),person.getGender(),person.getHomeAddress(),person.getContactNumber(),person.getEmail(),vitalSign,person.getPersonId());
            patientList.getPatientList().add(patientNew);
            displayPatientData();
            
        
        } else{
            patientNew = patientList.getPatientList().stream().filter(patient -> patient.getPersonId() == person.getPersonId()).collect(Collectors.toList()).get(0);
            patientNew.setVitalSign(vitalSign);
              System.out.println("check 4");
//            patientPresent.setVitalSign(vitalSign);
            displayPatientData();
        }
        
        Encounter encounter = new Encounter(vitalSign);
        encounter.setEncounterTime(LocalDateTime.now());
        encounter.setPatientId(patientNew.getPatientId());
        encounter.setVitalSign(vitalSign);
        encounter.setIsPatientHealthy(true);
        encounterList.getEncounterList().add(encounter);
        
            
        
        }
        }
        
        
        
    }//GEN-LAST:event_btnAddEncounterActionPerformed

    private void txtHighBPActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtHighBPActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtHighBPActionPerformed

    private void txtHeartRateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtHeartRateActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtHeartRateActionPerformed

    private void txtWeightActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtWeightActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtWeightActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        // TODO add your handling code here:
        if(selectedRowIndex < 0){
            JOptionPane.showMessageDialog(this, "Please select a row");
        }else{
        
        VitalSigns vitalSign = new VitalSigns(0,0,0,0);
        House house = new House();
        Patient patient = new Patient("","",0,"",house,"","",vitalSign,0);
        Person personSelected = personList.getPersonList().get(selectedRowIndex);
        personList.getPersonList().remove(personSelected);
        
        System.out.println("  ");
        System.out.println(" EncounterList ");
        System.out.println(encounterList.getEncounterList().size());
        
        ArrayList<Encounter> encounterRemoval = new ArrayList<Encounter>();
        ArrayList<Patient> patientRemoval = patientList.getPatientList();
        
        for(Patient patientRemove : patientRemoval){
            if(patientRemove.getPersonId() == personSelected.getPersonId()){
                patient = patientRemove;
            }
        }
        
        patientList.getPatientList().remove(patient);
        
        for(Encounter encounter : encounterList.getEncounterList()){
            if(patient.getPatientId() == encounter.getPatientId()){
                encounterRemoval.add(encounter);
            }
        }
        
        for(Encounter encounter : encounterRemoval){
            encounterList.getEncounterList().remove(encounter);
        }
        
        System.out.println("  ");
        System.out.println(" EncounterList ");
        System.out.println(encounterList.getEncounterList().size());
        
         displayPersonData();
         displayPatientData();
         
         
         txtFirstName.setText("");
            txtLastName.setText("");
            txtAge.setText("");
            txtAddress.setText("");
            txtContact.setText("");
            txtEmail.setText("");
            txtHouseNumber.setText("");
            genderComboBox.setSelectedItem(null);
            cityComboBox.setSelectedItem(null);
            communityComboBox.setSelectedItem(null);
            txtPinCode.setText("");
            txtPersonId.setText("");
        }
    }//GEN-LAST:event_btnDeleteActionPerformed

    private void displayPersonData(){
//        if(personList.personList.size() >=1){
            DefaultTableModel TableRowModelPeople = (DefaultTableModel) tablePeopleData.getModel();
            TableRowModelPeople.setRowCount(0);
            System.out.print(personList.getPersonList().size());
            for(Person person : personList.getPersonList() ){
                Object[] dummyRow = new Object[4];
                dummyRow[0] = person.getPersonId();
                dummyRow[1] = person.getFirstName();
                dummyRow[2] = person.getLastName();
                dummyRow[3] = person.getHomeAddress().getCity();
                TableRowModelPeople.addRow(dummyRow);
            
            }
            
        
        
    
    }
    
    private void displayPatientData(){
        System.out.println("here");
//        if(patientList.getPatientList().size()>=1){
             DefaultTableModel TableModelPatient = (DefaultTableModel) tablePatientData.getModel();
             TableModelPatient.setRowCount(0);
             System.out.print(patientList.getPatientList().size());
             for(Patient patient : patientList.getPatientList()){
            Object[] dummyRow = new Object[7];
            dummyRow[0] = patient.getPatientId();
            dummyRow[1] = patient.getFirstName();
            dummyRow[2] = patient.getVitalSign().getBpLow();
            dummyRow[3] = patient.getVitalSign().getBpHigh();
            dummyRow[4] = patient.getVitalSign().getHeartRate();
            dummyRow[5] = patient.getVitalSign().getWeight();
            TableModelPatient.addRow(dummyRow);
            
        
//        }
        
        }
       
        
        
    
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddEncounter;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnSelect;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JComboBox<String> cityComboBox;
    private javax.swing.JComboBox<String> communityComboBox;
    private javax.swing.JComboBox<String> genderComboBox;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable tablePatientData;
    private javax.swing.JTable tablePeopleData;
    private javax.swing.JTextField txtAddress;
    private javax.swing.JTextField txtAge;
    private javax.swing.JTextField txtContact;
    private javax.swing.JTextField txtEmail;
    private javax.swing.JTextField txtFirstName;
    private javax.swing.JTextField txtHeartRate;
    private javax.swing.JTextField txtHighBP;
    private javax.swing.JTextField txtHouseNumber;
    private javax.swing.JTextField txtLastName;
    private javax.swing.JTextField txtLowBP;
    private javax.swing.JTextField txtPersonId;
    private javax.swing.JTextField txtPinCode;
    private javax.swing.JTextField txtWeight;
    // End of variables declaration//GEN-END:variables
}
